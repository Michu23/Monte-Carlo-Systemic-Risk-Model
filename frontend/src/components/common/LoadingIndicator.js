import React from 'react';\nimport {\n  Box,\n  CircularProgress,\n  LinearProgress,\n  Typography,\n  Backdrop,\n  Paper,\n  Skeleton\n} from '@mui/material';\n\n/**\n * Centered loading spinner\n */\nexport const CenteredLoading = ({ \n  size = 40, \n  message = 'Loading...', \n  minHeight = '200px',\n  showMessage = true \n}) => (\n  <Box\n    sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight,\n      gap: 2\n    }}\n  >\n    <CircularProgress size={size} />\n    {showMessage && (\n      <Typography variant=\"body2\" color=\"text.secondary\">\n        {message}\n      </Typography>\n    )}\n  </Box>\n);\n\n/**\n * Inline loading spinner\n */\nexport const InlineLoading = ({ size = 20, message, color = 'primary' }) => (\n  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n    <CircularProgress size={size} color={color} />\n    {message && (\n      <Typography variant=\"body2\" color=\"text.secondary\">\n        {message}\n      </Typography>\n    )}\n  </Box>\n);\n\n/**\n * Full screen loading overlay\n */\nexport const FullScreenLoading = ({ \n  open = true, \n  message = 'Loading...', \n  onClose \n}) => (\n  <Backdrop\n    sx={{ \n      color: '#fff', \n      zIndex: (theme) => theme.zIndex.drawer + 1,\n      flexDirection: 'column',\n      gap: 2\n    }}\n    open={open}\n    onClick={onClose}\n  >\n    <CircularProgress color=\"inherit\" size={60} />\n    <Typography variant=\"h6\" color=\"inherit\">\n      {message}\n    </Typography>\n  </Backdrop>\n);\n\n/**\n * Progress bar with percentage\n */\nexport const ProgressBar = ({ \n  value = 0, \n  message, \n  showPercentage = true,\n  variant = 'determinate',\n  color = 'primary'\n}) => (\n  <Box sx={{ width: '100%' }}>\n    {message && (\n      <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n        {message}\n      </Typography>\n    )}\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n      <Box sx={{ width: '100%' }}>\n        <LinearProgress \n          variant={variant} \n          value={value} \n          color={color}\n        />\n      </Box>\n      {showPercentage && variant === 'determinate' && (\n        <Box sx={{ minWidth: 35 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {`${Math.round(value)}%`}\n          </Typography>\n        </Box>\n      )}\n    </Box>\n  </Box>\n);\n\n/**\n * Card loading skeleton\n */\nexport const CardSkeleton = ({ lines = 3, showAvatar = false }) => (\n  <Paper sx={{ p: 2 }}>\n    <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2 }}>\n      {showAvatar && (\n        <Skeleton variant=\"circular\" width={40} height={40} />\n      )}\n      <Box sx={{ flex: 1 }}>\n        <Skeleton variant=\"text\" sx={{ fontSize: '1.2rem', mb: 1 }} />\n        {Array.from({ length: lines }).map((_, index) => (\n          <Skeleton \n            key={index}\n            variant=\"text\" \n            width={index === lines - 1 ? '60%' : '100%'}\n            sx={{ mb: 0.5 }}\n          />\n        ))}\n      </Box>\n    </Box>\n  </Paper>\n);\n\n/**\n * Table loading skeleton\n */\nexport const TableSkeleton = ({ rows = 5, columns = 4 }) => (\n  <Box>\n    {Array.from({ length: rows }).map((_, rowIndex) => (\n      <Box \n        key={rowIndex}\n        sx={{ \n          display: 'flex', \n          gap: 2, \n          mb: 1,\n          p: 1\n        }}\n      >\n        {Array.from({ length: columns }).map((_, colIndex) => (\n          <Skeleton \n            key={colIndex}\n            variant=\"text\" \n            sx={{ flex: 1 }}\n          />\n        ))}\n      </Box>\n    ))}\n  </Box>\n);\n\n/**\n * Chart loading skeleton\n */\nexport const ChartSkeleton = ({ height = 300 }) => (\n  <Box sx={{ width: '100%', height }}>\n    <Skeleton variant=\"rectangular\" width=\"100%\" height=\"100%\" />\n  </Box>\n);\n\n/**\n * Button loading state\n */\nexport const LoadingButton = ({ \n  loading = false, \n  children, \n  loadingText = 'Loading...',\n  size = 20,\n  ...props \n}) => (\n  <Box sx={{ position: 'relative', display: 'inline-block' }}>\n    <button \n      {...props}\n      disabled={loading || props.disabled}\n      style={{\n        ...props.style,\n        opacity: loading ? 0.6 : 1\n      }}\n    >\n      {loading ? (\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <CircularProgress size={size} color=\"inherit\" />\n          {loadingText}\n        </Box>\n      ) : (\n        children\n      )}\n    </button>\n  </Box>\n);\n\n/**\n * Retry component for failed states\n */\nexport const RetryComponent = ({ \n  onRetry, \n  message = 'Something went wrong', \n  retryText = 'Try Again' \n}) => (\n  <Box\n    sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '200px',\n      gap: 2,\n      textAlign: 'center'\n    }}\n  >\n    <Typography variant=\"body1\" color=\"text.secondary\">\n      {message}\n    </Typography>\n    <button \n      onClick={onRetry}\n      style={{\n        padding: '8px 16px',\n        backgroundColor: '#1976d2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}\n    >\n      {retryText}\n    </button>\n  </Box>\n);\n\n// Default export\nconst LoadingIndicator = CenteredLoading;\n\nexport default LoadingIndicator;"