services:
  # Backend API service
  backend:
    build: ./backend
    container_name: systemic-risk-backend
    restart: always
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/systemic_risk
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-key-change-in-production
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    ports:
      - "5000:5000"

  # Celery worker for background tasks
  worker:
    build: ./backend
    container_name: systemic-risk-worker
    restart: always
    command: celery -A backend.services.simulation_service.celery worker --loglevel=info
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/systemic_risk
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-key-change-in-production
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - backend
      - redis

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: systemic-risk-frontend
    restart: always
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend

  # PostgreSQL database
  db:
    image: postgres:13
    container_name: systemic-risk-db
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=systemic_risk
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # Redis for Celery
  redis:
    image: redis:6
    container_name: systemic-risk-redis
    restart: always
    ports:
      - "6379:6379"

volumes:
  postgres_data: